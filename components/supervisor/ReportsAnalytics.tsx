'use client'

import { useState } from 'react'
import { useRouter } from 'next/navigation'
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, LineChart, Line, PieChart, Pie, Cell } from 'recharts'

interface AttendanceRecord {
  id: number
  date: string | null
  status: 'present' | 'absent' | 'late' | null
  workerName: string | null
  workerLastName: string | null
  groupName: string | null
  supervisorApproved: boolean | null
  dailyRate: string | null
}

interface PaymentRecord {
  id: number
  amount: string
  period: string | null
  status: 'pending' | 'approved' | 'disbursed' | 'failed' | null
  workerName: string | null
  workerLastName: string | null
  groupName: string
}

interface User {
  id: number
  firstName: string | null
  lastName: string | null
  role: string
}

interface DateRange {
  dateFrom: string
  dateTo: string
  groupId?: number
}

interface ReportsAnalyticsProps {
  attendanceData: AttendanceRecord[]
  paymentData: PaymentRecord[]
  currentUser: User
  initialDateRange: DateRange
}

export default function ReportsAnalytics({ 
  attendanceData, 
  paymentData, 
  currentUser, 
  initialDateRange 
}: ReportsAnalyticsProps) {
  const [dateRange, setDateRange] = useState(initialDateRange)
  const router = useRouter()

  const handleDateRangeChange = (newRange: Partial<DateRange>) => {
    const updatedRange = { ...dateRange, ...newRange }
    setDateRange(updatedRange)
    
    const params = new URLSearchParams()
    Object.entries(updatedRange).forEach(([key, value]) => {
      if (value !== undefined && value !== '') {
        params.set(key, value.toString())
      }
    })
    
    router.push(`/supervisor/reports?${params.toString()}`)
  }

  // Calculate attendance analytics
  const totalAttendanceRecords = attendanceData.length
  const presentRecords = attendanceData.filter(r => r.status === 'present').length
  const absentRecords = attendanceData.filter(r => r.status === 'absent').length
  const lateRecords = attendanceData.filter(r => r.status === 'late').length
  const attendanceRate = totalAttendanceRecords > 0 ? (presentRecords / totalAttendanceRecords * 100) : 0

  // Calculate payment analytics
  const totalPayments = paymentData.reduce((sum, p) => sum + parseFloat(p.amount), 0)
  const pendingPayments = paymentData.filter(p => p.status === 'pending')
  const approvedPayments = paymentData.filter(p => p.status === 'approved')
  const disbursedPayments = paymentData.filter(p => p.status === 'disbursed')

  // Worker performance analytics
  const workerStats = attendanceData.reduce((acc, record) => {
    if (record.status) {
      const workerName = `${record.workerName || ''} ${record.workerLastName || ''}`.trim()
      if (!acc[workerName]) {
        acc[workerName] = { present: 0, absent: 0, late: 0, total: 0 }
      }
      acc[workerName][record.status]++
      acc[workerName].total++
    }
    return acc
  }, {} as Record<string, { present: number; absent: number; late: number; total: number }>)

  // Group performance analytics
  const groupStats = attendanceData.reduce((acc, record) => {
    if (record.status) {
      const groupName = record.groupName || 'Unknown'
      if (!acc[groupName]) {
        acc[groupName] = { present: 0, absent: 0, late: 0, total: 0 }
      }
      acc[groupName][record.status]++
      acc[groupName].total++
    }
    return acc
  }, {} as Record<string, { present: number; absent: number; late: number; total: number }>)

  // Prepare chart data
  const attendanceChartData = Object.entries(groupStats).map(([group, stats]) => ({
    group: group.substring(0, 15) + (group.length > 15 ? '...' : ''),
    present: stats.present,
    absent: stats.absent,
    late: stats.late,
    rate: ((stats.present / stats.total) * 100).toFixed(1)
  }))

  const paymentStatusData = [
    { name: 'Pending', value: pendingPayments.length, color: '#f59e0b' },
    { name: 'Approved', value: approvedPayments.length, color: '#3b82f6' },
    { name: 'Disbursed', value: disbursedPayments.length, color: '#10b981' }
  ]

  // Daily attendance trend (last 7 days)
  const last7Days = Array.from({ length: 7 }, (_, i) => {
    const date = new Date()
    date.setDate(date.getDate() - i)
    return date.toISOString().split('T')[0]
  }).reverse()

  const dailyTrendData = last7Days.map(date => {
    const dayRecords = attendanceData.filter(r => r.date === date)
    return {
      date: new Date(date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' }),
      present: dayRecords.filter(r => r.status === 'present').length,
      absent: dayRecords.filter(r => r.status === 'absent').length,
      late: dayRecords.filter(r => r.status === 'late').length
    }
  })

  const exportAttendanceReport = () => {
    const csvContent = [
      ['Report Type: Attendance Summary'],
      ['Period:', `${dateRange.dateFrom} to ${dateRange.dateTo}`],
      ['Generated By:', `${currentUser.firstName} ${currentUser.lastName}`],
      ['Generated On:', new Date().toLocaleDateString()],
      [''],
      ['SUMMARY STATISTICS'],
      ['Total Records:', totalAttendanceRecords.toString()],
      ['Present:', presentRecords.toString()],
      ['Absent:', absentRecords.toString()],
      ['Late:', lateRecords.toString()],
      ['Attendance Rate:', `${attendanceRate.toFixed(1)}%`],
      [''],
      ['WORKER PERFORMANCE'],
      ['Worker', 'Present', 'Absent', 'Late', 'Total', 'Attendance Rate'],
      ...Object.entries(workerStats).map(([worker, stats]) => [
        worker,
        stats.present.toString(),
        stats.absent.toString(),
        stats.late.toString(),
        stats.total.toString(),
        `${(stats.present / stats.total * 100).toFixed(1)}%`
      ]),
      [''],
      ['GROUP PERFORMANCE'],
      ['Group', 'Present', 'Absent', 'Late', 'Total', 'Attendance Rate'],
      ...Object.entries(groupStats).map(([group, stats]) => [
        group,
        stats.present.toString(),
        stats.absent.toString(),
        stats.late.toString(),
        stats.total.toString(),
        `${(stats.present / stats.total * 100).toFixed(1)}%`
      ])
    ].map(row => Array.isArray(row) ? row.join(',') : row).join('\n')

    const blob = new Blob([csvContent], { type: 'text/csv' })
    const url = window.URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `attendance-report-${dateRange.dateFrom}-to-${dateRange.dateTo}.csv`
    a.click()
    window.URL.revokeObjectURL(url)
  }

  const exportPaymentReport = () => {
    const csvContent = [
      ['Report Type: Payment Summary'],
      ['Period:', `${dateRange.dateFrom} to ${dateRange.dateTo}`],
      ['Generated By:', `${currentUser.firstName} ${currentUser.lastName}`],
      ['Generated On:', new Date().toLocaleDateString()],
      [''],
      ['PAYMENT STATISTICS'],
      ['Total Payments:', `KSh ${totalPayments.toLocaleString()}`],
      ['Pending Count:', pendingPayments.length.toString()],
      ['Approved Count:', approvedPayments.length.toString()],
      ['Disbursed Count:', disbursedPayments.length.toString()],
      [''],
      ['DETAILED RECORDS'],
      ['Date', 'Worker', 'Group', 'Amount', 'Status'],
      ...paymentData.map(record => [
        record.period || 'N/A',
        `${record.workerName || ''} ${record.workerLastName || ''}`.trim(),
        record.groupName || '',
        `KSh ${record.amount}`,
        record.status || 'unknown'
      ])
    ].map(row => Array.isArray(row) ? row.join(',') : row).join('\n')

    const blob = new Blob([csvContent], { type: 'text/csv' })
    const url = window.URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `payment-report-${dateRange.dateFrom}-to-${dateRange.dateTo}.csv`
    a.click()
    window.URL.revokeObjectURL(url)
  }

  return (
    <div className="space-y-6">
      {/* Date Range Filter */}
      <div className="bg-white p-6 rounded-lg shadow-sm border">
        <h3 className="text-lg font-semibold mb-4">Report Period</h3>
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">From Date</label>
            <input
              type="date"
              value={dateRange.dateFrom}
              onChange={(e) => handleDateRangeChange({ dateFrom: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">To Date</label>
            <input
              type="date"
              value={dateRange.dateTo}
              onChange={(e) => handleDateRangeChange({ dateTo: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
          <div className="flex items-end">
            <button
              onClick={exportAttendanceReport}
              className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 text-sm"
            >
              Export Attendance Report
            </button>
          </div>
          <div className="flex items-end">
            <button
              onClick={exportPaymentReport}
              className="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 text-sm"
            >
              Export Payment Report
            </button>
          </div>
        </div>
      </div>

      {/* Attendance Summary */}
      <div className="bg-white p-6 rounded-lg shadow-sm border">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">Attendance Summary</h3>
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          <div className="text-center">
            <p className="text-2xl font-bold text-blue-600">{totalAttendanceRecords}</p>
            <p className="text-sm text-gray-600">Total Records</p>
          </div>
          <div className="text-center">
            <p className="text-2xl font-bold text-green-600">{presentRecords}</p>
            <p className="text-sm text-gray-600">Present</p>
          </div>
          <div className="text-center">
            <p className="text-2xl font-bold text-red-600">{absentRecords}</p>
            <p className="text-sm text-gray-600">Absent</p>
          </div>
          <div className="text-center">
            <p className="text-2xl font-bold text-yellow-600">{lateRecords}</p>
            <p className="text-sm text-gray-600">Late</p>
          </div>
        </div>
        <div className="mt-4 pt-4 border-t">
          <div className="flex justify-between items-center">
            <span className="text-gray-600">Overall Attendance Rate:</span>
            <span className="text-2xl font-bold text-blue-600">{attendanceRate.toFixed(1)}%</span>
          </div>
        </div>
      </div>

      {/* Payment Summary */}
      <div className="bg-white p-6 rounded-lg shadow-sm border">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">Payment Summary</h3>
        <div className="space-y-4">
          <div className="flex justify-between">
            <span className="text-gray-600">Total Amount:</span>
            <span className="font-semibold">KSh {totalPayments.toLocaleString()}</span>
          </div>
          <div className="flex justify-between">
            <span className="text-gray-600">Pending:</span>
            <span className="font-semibold text-orange-600">{pendingPayments.length}</span>
          </div>
          <div className="flex justify-between">
            <span className="text-gray-600">Approved:</span>
            <span className="font-semibold text-blue-600">{approvedPayments.length}</span>
          </div>
          <div className="flex justify-between">
            <span className="text-gray-600">Disbursed:</span>
            <span className="font-semibold text-green-600">{disbursedPayments.length}</span>
          </div>
        </div>
      </div>

      {/* Visual Charts */}
      <div className="bg-white p-6 rounded-lg shadow">
        <h3 className="text-lg font-semibold mb-4">Visual Analytics</h3>
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* Attendance by Group Chart */}
          <div className="h-64">
            <h4 className="text-md font-medium mb-2">Attendance by Group</h4>
            <ResponsiveContainer width="100%" height="100%">
              <BarChart data={attendanceChartData}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="group" />
                <YAxis />
                <Tooltip />
                <Legend />
                <Bar dataKey="present" fill="#10b981" name="Present" />
                <Bar dataKey="late" fill="#f59e0b" name="Late" />
                <Bar dataKey="absent" fill="#ef4444" name="Absent" />
              </BarChart>
            </ResponsiveContainer>
          </div>
          
          {/* Payment Status Chart */}
          <div className="h-64">
            <h4 className="text-md font-medium mb-2">Payment Status Distribution</h4>
            <ResponsiveContainer width="100%" height="100%">
              <PieChart>
                <Pie
                  data={paymentStatusData}
                  cx="50%"
                  cy="50%"
                  labelLine={false}
                  label={({ name, value }) => `${name}: ${value}`}
                  outerRadius={80}
                  fill="#8884d8"
                  dataKey="value"
                >
                  {paymentStatusData.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={entry.color} />
                  ))}
                </Pie>
                <Tooltip />
              </PieChart>
            </ResponsiveContainer>
          </div>
        </div>
        
        {/* Daily Attendance Trend */}
        <div className="mt-6 h-64">
          <h4 className="text-md font-medium mb-2">Daily Attendance Trend (Last 7 Days)</h4>
          <ResponsiveContainer width="100%" height="100%">
            <LineChart data={dailyTrendData}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="date" />
              <YAxis />
              <Tooltip />
              <Legend />
              <Line type="monotone" dataKey="present" stroke="#10b981" name="Present" />
              <Line type="monotone" dataKey="late" stroke="#f59e0b" name="Late" />
              <Line type="monotone" dataKey="absent" stroke="#ef4444" name="Absent" />
            </LineChart>
          </ResponsiveContainer>
        </div>
      </div>

      {/* Worker Performance Analytics */}
      <div className="bg-white p-6 rounded-lg shadow-sm border">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">Worker Performance Analytics</h3>
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Worker</th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Present</th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Absent</th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Late</th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Total</th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Attendance Rate</th>
              </tr>
            </thead>
            <tbody className="divide-y divide-gray-200">
              {Object.entries(workerStats).map(([worker, stats]) => (
                <tr key={worker} className="hover:bg-gray-50">
                  <td className="px-4 py-4 text-sm font-medium text-gray-900">{worker}</td>
                  <td className="px-4 py-4 text-sm text-green-600">{stats.present}</td>
                  <td className="px-4 py-4 text-sm text-red-600">{stats.absent}</td>
                  <td className="px-4 py-4 text-sm text-yellow-600">{stats.late}</td>
                  <td className="px-4 py-4 text-sm text-gray-900">{stats.total}</td>
                  <td className="px-4 py-4 text-sm">
                    <div className="flex items-center">
                      <div className="flex-1 bg-gray-200 rounded-full h-2 mr-2">
                        <div 
                          className="bg-blue-600 h-2 rounded-full" 
                          style={{ width: `${(stats.present / stats.total * 100)}%` }}
                        ></div>
                      </div>
                      <span className="text-sm font-medium">
                        {(stats.present / stats.total * 100).toFixed(1)}%
                      </span>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* Group Performance Analytics */}
      <div className="bg-white p-6 rounded-lg shadow-sm border">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">Group Performance Analytics</h3>
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Group</th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Present</th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Absent</th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Late</th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Total</th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Attendance Rate</th>
              </tr>
            </thead>
            <tbody className="divide-y divide-gray-200">
              {Object.entries(groupStats).map(([group, stats]) => (
                <tr key={group} className="hover:bg-gray-50">
                  <td className="px-4 py-4 text-sm font-medium text-gray-900">{group}</td>
                  <td className="px-4 py-4 text-sm text-green-600">{stats.present}</td>
                  <td className="px-4 py-4 text-sm text-red-600">{stats.absent}</td>
                  <td className="px-4 py-4 text-sm text-yellow-600">{stats.late}</td>
                  <td className="px-4 py-4 text-sm text-gray-900">{stats.total}</td>
                  <td className="px-4 py-4 text-sm">
                    <div className="flex items-center">
                      <div className="flex-1 bg-gray-200 rounded-full h-2 mr-2">
                        <div 
                          className="bg-green-600 h-2 rounded-full" 
                          style={{ width: `${(stats.present / stats.total * 100)}%` }}
                        ></div>
                      </div>
                      <span className="text-sm font-medium">
                        {(stats.present / stats.total * 100).toFixed(1)}%
                      </span>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* Payment Reconciliation */}
      <div className="bg-white p-6 rounded-lg shadow-sm border">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">Payment Reconciliation</h3>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          <div className="bg-orange-50 p-4 rounded-lg">
            <h4 className="font-semibold text-orange-800">Pending Payments</h4>
            <p className="text-2xl font-bold text-orange-600">{pendingPayments.length}</p>
            <p className="text-sm text-orange-700">
              KSh {pendingPayments.reduce((sum, p) => sum + parseFloat(p.amount), 0).toLocaleString()}
            </p>
          </div>
          <div className="bg-blue-50 p-4 rounded-lg">
            <h4 className="font-semibold text-blue-800">Approved Payments</h4>
            <p className="text-2xl font-bold text-blue-600">{approvedPayments.length}</p>
            <p className="text-sm text-blue-700">
              KSh {approvedPayments.reduce((sum, p) => sum + parseFloat(p.amount), 0).toLocaleString()}
            </p>
          </div>
          <div className="bg-green-50 p-4 rounded-lg">
            <h4 className="font-semibold text-green-800">Disbursed Payments</h4>
            <p className="text-2xl font-bold text-green-600">{disbursedPayments.length}</p>
            <p className="text-sm text-green-700">
              KSh {disbursedPayments.reduce((sum, p) => sum + parseFloat(p.amount), 0).toLocaleString()}
            </p>
          </div>
        </div>
      </div>
    </div>
  )
}
